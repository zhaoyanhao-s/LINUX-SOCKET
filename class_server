#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>


class TcpServer
{
public:
  int m_listenfd;
  int m_clientfd;

  TcpServer();
  bool Listen(int port);
  bool Accept();
  int Send(const void* buf);
  int Recv(void* buf);
 ~TcpServer();
};


TcpServer::TcpServer()
{
        m_listenfd = socket(AF_INET,SOCK_STREAM,0);
        m_clientfd = socket(AF_INET,SOCK_STREAM,0);
        if(m_listenfd == -1||m_clientfd == -1)
        perror("socket");
        else
        printf("socket: ok!\n");

}
bool TcpServer::Listen(int port)
{
   m_listenfd = socket(AF_INET,SOCK_STREAM,0);
   struct sockaddr_in servaddr;
   memset(&servaddr,0,sizeof(servaddr));
   servaddr.sin_family = AF_INET;
   servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
   servaddr.sin_port = htons(port);
   if(bind(m_listenfd,(struct sockaddr*)&servaddr,sizeof(servaddr)) != 0)
   {
        close(m_listenfd); m_listenfd = 0; return false;
   }
   if(listen(m_listenfd,5) != 0)
   {
        close(m_listenfd); m_listenfd = 0; return false;
   }
   printf("Listen: ok!");
   return true;
}

bool TcpServer::Accept()
{
   if((m_clientfd = accept(m_listenfd,0,0)) <= 0)
   {
        printf("accept: false!\n");
        return false;
   }
   else
   {
           printf("accept: ok!\n");
        return true;
   }
}

   int TcpServer::Send(const void* buf)
{
        int jud = 1;
        if((jud = (send(m_clientfd,buf,sizeof(buf),0)) < 0))
        {
                printf("send error : %d\n",jud);
        }
        return jud;
}


int TcpServer::Recv(void* buf)
{
        int jud = 1;
        if((jud = (recv(m_clientfd,buf,sizeof(buf),0)) < 0))
        {
                printf("Recv error : %d\n",jud);
        }
        return jud;
}





TcpServer::~TcpServer()
{
  if (m_listenfd!=0) close(m_listenfd);
  if (m_clientfd!=0) close(m_clientfd);
}
