#include <stdio.h>
#include <string>
#include <string.h>
#include <unistd.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>

class TcpClient
{
 private:
        int m_socket;
 public:
        TcpClient();
        bool Connect(const char* serverip,const int port);
        int Send(const void* buf);
        int Recv(void* buf);
        ~TcpClient();
};

TcpClient::TcpClient()
{
        m_socket = socket(AF_INET,SOCK_STREAM,0);
        if(m_socket == -1)
        perror("socket");
        else
        printf("socket: ok!\n");
}
bool TcpClient::Connect(const char* serverip, const int port)
{
        struct sockaddr_in servaddr;
        memset(&servaddr,0,sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_port   = htons(port);
        servaddr.sin_addr.s_addr = inet_addr(serverip);
        if(connect(m_socket,(struct sockaddr*)&servaddr,sizeof(servaddr)) != 0)
        {
                close(m_socket); m_socket = 0;
                printf("connect: false!\n");
                return false;
        }
        printf("connect: ok!\n");
        return true;
}

int TcpClient::Send(const void* buf)
{
        int jud = 1;
        if((jud = (send(m_socket,buf,sizeof(buf),0)) < 0))
        {
                printf("send error : %d\n",jud);
        }
        return jud;
}
int TcpClient::Send(const void* buf)
{
        int jud = 1;
        if((jud = (recv(m_socket,buf,sizeof(buf),0)) < 0))
        {
                printf("Recv error : %d\n",jud);
        }
        return jud;
}

TcpClient::~TcpClient()
{
        if(m_socket!=0)
        close(m_socket);
        printf("已断开与服务器的连接");
}




